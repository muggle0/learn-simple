###
GET http://localhost:9200/test


###

PUT http://localhost:9200/learn
Authorization: {{Authorization}}

> {%

 if(response.status==200){
   client.log(client.global.get("Authorization"))
 }else {
   var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base64DecodeChars = new Array(
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
    -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
function base64encode(str) {
    var out, i, len;
    var c1, c2, c3;
    len = str.length;
    i = 0;
    out = "";
    while (i < len) {
        c1 = str.charCodeAt(i++) & 0xff;
        if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt((c1 & 0x3) << 4);
            out += "==";
            break;
        }
        c2 = str.charCodeAt(i++);
        if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            out += base64EncodeChars.charAt((c2 & 0xF) << 2);
            out += "=";
            break;
        }
        c3 = str.charCodeAt(i++);
        out += base64EncodeChars.charAt(c1 >> 2);
        out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
        out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
        out += base64EncodeChars.charAt(c3 & 0x3F);
    }
    return out;
}
function base64decode(str) {
    var c1, c2, c3, c4;
    var i, len, out;
    len = str.length;
    i = 0;
    out = "";
    while (i < len) {
        /* c1 */
        do {
            c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
        } while (i < len && c1 == -1);
        if (c1 == -1)
            break;
        /* c2 */
        do {
            c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
        } while (i < len && c2 == -1);
        if (c2 == -1)
            break;
        out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));
        /* c3 */
        do {
            c3 = str.charCodeAt(i++) & 0xff;
            if (c3 == 61)
                return out;
            c3 = base64DecodeChars[c3];
        } while (i < len && c3 == -1);
        if (c3 == -1)
            break;
        out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));
        /* c4 */
        do {
            c4 = str.charCodeAt(i++) & 0xff;
            if (c4 == 61)
                return out;
            c4 = base64DecodeChars[c4];
        } while (i < len && c4 == -1);
        if (c4 == -1)
            break;
        out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
    }
    return out;
}
client.global.set("Authorization","Basic "+base64encode("elastic:elastic"));
client.log(base64encode("elastic:elastic"))
 }
 %}



###
POST http://localhost:9200/learn
Authorization: {{Authorization}}

###
GET http://localhost:9200/learn
Authorization: {{Authorization}}

###

GET http://localhost:9200/_cat/indices?v
Authorization: {{Authorization}}

###
DELETE http://localhost:9200/learn
Authorization: {{Authorization}}

###
POST http://localhost:9200/learn/_doc
Authorization: {{Authorization}}
Content-Type: application/json

{
  "test": ">>>",
  "hard": ">>>"
}

###
POST http://localhost:9200/learn/_doc/1993324
Authorization: {{Authorization}}
Content-Type: application/json

{
  "test": ">>>",
  "hard": ">>>",
  "key1": 1
}

###
POST http://localhost:9200/learn/_create/1993323
Authorization: {{Authorization}}
Content-Type: application/json

###
GET  http://localhost:9200/learn/_doc/19933231
Authorization: {{Authorization}}
Content-Type: application/json

###
GET http://localhost:9200/learn/_search
Authorization: {{Authorization}}
Content-Type: application/json

### 绿色——最健康的状态,代表所有的主分片和副本分片都可用; 黄色——所有的主分片可用,但是部分副本分片不可用; 红色——部分主分片不可用
POST http://localhost:9200/learn/_update/LBb3cHsBo8RFOZxJNgw_
Authorization: {{Authorization}}
Content-Type: application/json

{
  "doc": {
    "hard": "xxxxsxsxx"
  }
}

###
DELETE http://localhost:9200/learn/_doc/LBb3cHsBo8RFOZxJNgw_
Authorization: {{Authorization}}
Content-Type: application/json

###
GET http://localhost:9200/learn/_search?q=hard:xxxxssssssssssq
Authorization: {{Authorization}}
Content-Type: application/json

###
POST http://localhost:9200/learn/_search
Authorization: {{Authorization}}
Content-Type: application/json

{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "hard": "x"
          }
        }
      ]
    }
  }
}


###

POST http://localhost:9200/learn/_search
Authorization: {{Authorization}}
Content-Type: application/json

{
  "query": {
    "bool": {
      "must": [
        {
          "match_all": {
          }
        }
      ]
    }
  }
}

###

POST http://localhost:9200/learn/_search
Authorization: {{Authorization}}
Content-Type: application/json

{
  "query": {
    "bool": {
      "must": [
        {
          "match_all": {
          }
        }
      ]
    }
  },
  "_source": [
    "hard"
  ],
  "sort": {
    "price": {
      "order": "desc"
    }
  }
}

###
POST http://localhost:9200/learn/_search
Authorization: {{Authorization}}
Content-Type: application/json

{
  "query": {
    "match_phrase": {
      "hard": "x"
    }
  }
}

###
POST http://localhost:9200/learn/_search
Authorization: {{Authorization}}
Content-Type: application/json

{
  "query": {
    "match": {
      "hard": "x"
    }
  }
}

###
POST http://localhost:9200/learn/_search
Authorization: {{Authorization}}
Content-Type: application/json

{
  "aggs": {
    "price_group": {
      "terms": {
        "field": "key1"
      }
    }
  }
}

###
POST http://localhost:9200/user/_mapping
Authorization: {{Authorization}}
Content-Type: application/json

{
  "properties": {
    "name": {
      "type": "keyword",
      "index": "true"
    }
  }
}

### TYPE DOC field mapping shards replicas